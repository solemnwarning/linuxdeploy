name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    # build at least once a month
    - cron: '0 0 1 * *'

jobs:
  build-and-test:
    strategy:
      matrix:
        ARCH: [x86_64, i386, armhf, aarch64]
        BUILD_TYPE: [appimage, coverage]
      fail-fast: false

    name: ${{ matrix.BUILD_TYPE }} ${{ matrix.ARCH }}
    runs-on: ubuntu-latest

    env:
      ARCH: ${{ matrix.ARCH }}
      BUILD_TYPE: ${{ matrix.BUILD_TYPE }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install dependencies (x86_64)
        if: matrix.ARCH == 'x86_64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcovr libmagic-dev libjpeg-dev libpng-dev libboost-filesystem-dev libboost-regex-dev cimg-dev

      - name: Install dependencies (i386)
        if: matrix.ARCH == 'i386'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y gcovr libmagic-dev:i386 libjpeg-dev:i386 libpng-dev:i386 libboost-filesystem-dev:i386 libboost-regex-dev:i386 cimg-dev gcc-multilib g++-multilib libfuse2:i386

      - name: Prepare chroot (armhf)
        if: matrix.ARCH == 'armhf' && matrix.BUILD_TYPE != 'coverage'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support debootstrap
          sudo debootstrap --components=main,universe --include=build-essential,libmagic-dev,libjpeg-dev,libpng-dev,libboost-filesystem-dev,libboost-regex-dev,libfuse2,wget,git,libssl-dev,autoconf,automake,patchelf,pkg-config --arch=armhf focal ./focal-armhf-chroot/ http://ports.ubuntu.com/

          # Install updates not present in base 'focal' repo.
          sudo tee -a ./focal-armhf-chroot/etc/apt/sources.list <<< "deb [arch=armhf] http://ports.ubuntu.com/ focal-updates  main universe" > /dev/null
          sudo tee -a ./focal-armhf-chroot/etc/apt/sources.list <<< "deb [arch=armhf] http://ports.ubuntu.com/ focal-security main universe" > /dev/null
          sudo chroot ./focal-armhf-chroot/ apt-get -y update
          sudo chroot ./focal-armhf-chroot/ apt-get -y dist-upgrade
          sudo chroot ./focal-armhf-chroot/ apt-get -y autoremove

      - name: Prepare chroot (aarch64)
        if: matrix.ARCH == 'aarch64' && matrix.BUILD_TYPE != 'coverage'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support debootstrap
          sudo debootstrap --components=main,universe --include=build-essential,libmagic-dev,libjpeg-dev,libpng-dev,libboost-filesystem-dev,libboost-regex-dev,libfuse2,wget,git,libssl-dev,autoconf,automake,patchelf,pkg-config --arch=arm64 focal ./focal-aarch64-chroot/ http://ports.ubuntu.com/

          # Install updates not present in base 'focal' repo.
          sudo tee -a ./focal-aarch64-chroot/etc/apt/sources.list <<< "deb [arch=arm64] http://ports.ubuntu.com/ focal-updates  main universe" > /dev/null
          sudo tee -a ./focal-aarch64-chroot/etc/apt/sources.list <<< "deb [arch=arm64] http://ports.ubuntu.com/ focal-security main universe" > /dev/null
          sudo chroot ./focal-aarch64-chroot/ apt-get -y update
          sudo chroot ./focal-aarch64-chroot/ apt-get -y dist-upgrade
          sudo chroot ./focal-aarch64-chroot/ apt-get -y autoremove

      - name: Build CMake (armhf)
        if: matrix.ARCH == 'armhf' && matrix.BUILD_TYPE != 'coverage'
        run: |
          sudo apt-get update
          sudo apt-get install -y crossbuild-essential-armhf
          sudo sh -c 'ARCH=armhf ./ci/build-cmake.sh "$1" "$2"' -- "/usr/local/" "$(pwd)/focal-armhf-chroot/"

      - name: Build CMake (aarch64)
        if: matrix.ARCH == 'aarch64' && matrix.BUILD_TYPE != 'coverage'
        run: |
          sudo apt-get update
          sudo apt-get install -y crossbuild-essential-arm64
          sudo sh -c 'ARCH=aarch64 ./ci/build-cmake.sh "$1" "$2"' -- "/usr/local/" "$(pwd)/focal-aarch64-chroot/"

      - name: Test coverage
        run: bash -ex ci/test-coverage.sh
        if: matrix.BUILD_TYPE == 'coverage' && (matrix.ARCH == 'i386' || matrix.ARCH == 'x86_64')

      - name: Build, test and build AppImage
        run: bash -ex ci/build.sh
        if: matrix.BUILD_TYPE != 'coverage' && (matrix.ARCH == 'i386' || matrix.ARCH == 'x86_64')

      - name: Build, test and build AppImage
        run: |
          sudo mkdir -p "./focal-$ARCH-chroot/$(pwd)"
          sudo mount -o bind ./ "./focal-$ARCH-chroot/$(pwd)"
          sudo chroot ./focal-$ARCH-chroot/ sh -c 'cd $1 && ARCH="$2" ./ci/build.sh' -- "$(pwd)" "$ARCH"
        if: matrix.BUILD_TYPE != 'coverage' && (matrix.ARCH == 'armhf' || matrix.ARCH == 'aarch64')

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        if: matrix.BUILD_TYPE != 'coverage'
        with:
          name: AppImage
          path: linuxdeploy*.AppImage*

  upload:
    name: Create release and upload artifacts
    needs:
      - build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Inspect directory after downloading artifacts
        run: ls -alFR
      - name: Create release and upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
            chmod +x pyuploadtool-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage **/linuxdeploy*.AppImage*
